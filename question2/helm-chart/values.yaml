# Default values for microservices-app
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Environment configuration
environment: production

# Image configuration
image:
  registry: docker.io
  repository: timilsinamadhav
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Service Account
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 1001
  runAsNonRoot: true
  runAsUser: 1001

# Security Context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001

# API Service Configuration
apiService:
  enabled: true
  name: api-service
  replicaCount: 2
  
  image:
    repository: api-service
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  
  readinessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

# Worker Service Configuration
workerService:
  enabled: true
  name: worker-service
  replicaCount: 1
  
  image:
    repository: worker-service
    tag: "latest"
    pullPolicy: IfNotPresent
  
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Worker-specific configuration
  processInterval: 30
  
  livenessProbe:
    exec:
      command:
        - python
        - -c
        - "import psycopg2; import os; conn = psycopg2.connect(host=os.getenv('DB_HOST'), port=int(os.getenv('DB_PORT', '5432')), database=os.getenv('DB_NAME'), user=os.getenv('DB_USER'), password=os.getenv('DB_PASSWORD')); conn.close()"
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  
  readinessProbe:
    exec:
      command:
        - python
        - -c
        - "import psycopg2; import os; conn = psycopg2.connect(host=os.getenv('DB_HOST'), port=int(os.getenv('DB_PORT', '5432')), database=os.getenv('DB_NAME'), user=os.getenv('DB_USER'), password=os.getenv('DB_PASSWORD')); conn.close()"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

# Frontend Service Configuration
frontendService:
  enabled: true
  name: frontend-service
  replicaCount: 2
  
  image:
    repository: frontend-service
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
    annotations: {}
  
  resources:
    limits:
      cpu: 250m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  
  readinessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

# Database Configuration
database:
  enabled: true
  name: database
  
  image:
    repository: postgres
    tag: "15-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 5432
    targetPort: 5432
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 8Gi
    annotations: {}
  
  # Database configuration
  auth:
    database: microservices_db
    username: postgres
    password: password
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  livenessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  
  readinessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
  hosts:
    - host: microservices.local
      paths:
        - path: /
          pathType: Prefix
          service: frontend-service
        - path: /api
          pathType: Prefix
          service: api-service
  tls: []
  #  - secretName: microservices-tls
  #    hosts:
  #      - microservices.local

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Monitoring and observability
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s

# ConfigMap data
configMap:
  data:
    NODE_ENV: "production"
    DB_HOST: "database"
    DB_PORT: "5432"
    PROCESS_INTERVAL: "30"

# Secret data (base64 encoded)
secret:
  data:
    DB_NAME: bWljcm9zZXJ2aWNlc19kYg==  # microservices_db
    DB_USER: cG9zdGdyZXM=              # postgres
    DB_PASSWORD: cGFzc3dvcmQ=          # password
